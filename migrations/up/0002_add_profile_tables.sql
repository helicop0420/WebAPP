-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

DROP TABLE IF EXISTS public.user_profile CASCADE;

CREATE OR REPLACE FUNCTION public.create_user_profile_on_user_creation()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF SECURITY DEFINER
    SET search_path=public
AS $BODY$
begin
  insert into public.user_profiles (user_id)
  values (new.id);
  return new;
end;
$BODY$;

ALTER FUNCTION public.create_user_profile_on_user_creation()
    OWNER TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.create_user_profile_on_user_creation() TO anon;

GRANT EXECUTE ON FUNCTION public.create_user_profile_on_user_creation() TO postgres;

GRANT EXECUTE ON FUNCTION public.create_user_profile_on_user_creation() TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.create_user_profile_on_user_creation() TO authenticated;

GRANT EXECUTE ON FUNCTION public.create_user_profile_on_user_creation() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.create_user_profile_on_user_creation() TO service_role;

CREATE OR REPLACE FUNCTION public.trigger_set_updated_at()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public.trigger_set_updated_at()
    OWNER TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.trigger_set_updated_at() TO anon;

GRANT EXECUTE ON FUNCTION public.trigger_set_updated_at() TO postgres;

GRANT EXECUTE ON FUNCTION public.trigger_set_updated_at() TO supabase_admin;

GRANT EXECUTE ON FUNCTION public.trigger_set_updated_at() TO authenticated;

GRANT EXECUTE ON FUNCTION public.trigger_set_updated_at() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.trigger_set_updated_at() TO service_role;

CREATE TABLE IF NOT EXISTS public.connections
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    from_user_id uuid NOT NULL,
    to_user_id uuid NOT NULL,
    CONSTRAINT connections_pkey PRIMARY KEY (id),
    CONSTRAINT connections_from_user_id_fkey FOREIGN KEY (from_user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT connections_to_user_id_fkey FOREIGN KEY (to_user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.connections
    OWNER to supabase_admin;

GRANT ALL ON TABLE public.connections TO anon;

GRANT ALL ON TABLE public.connections TO authenticated;

GRANT ALL ON TABLE public.connections TO postgres;

GRANT ALL ON TABLE public.connections TO service_role;

GRANT ALL ON TABLE public.connections TO supabase_admin;

CREATE TRIGGER connections_set_updated_at
    AFTER INSERT OR UPDATE 
    ON public.connections
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_updated_at();

CREATE TABLE IF NOT EXISTS public.deals
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    title text COLLATE pg_catalog."default",
    highlight_1_name text COLLATE pg_catalog."default",
    highlight_1_value text COLLATE pg_catalog."default",
    highlight_2_name text COLLATE pg_catalog."default",
    highlight_2_value text COLLATE pg_catalog."default",
    highlight_3_name text COLLATE pg_catalog."default",
    highlight_3_value text COLLATE pg_catalog."default",
    highlight_4_name text COLLATE pg_catalog."default",
    highlight_4_value text COLLATE pg_catalog."default",
    about text COLLATE pg_catalog."default",
    CONSTRAINT deals_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.deals
    OWNER to supabase_admin;

GRANT ALL ON TABLE public.deals TO anon;

GRANT ALL ON TABLE public.deals TO authenticated;

GRANT ALL ON TABLE public.deals TO postgres;

GRANT ALL ON TABLE public.deals TO service_role;

GRANT ALL ON TABLE public.deals TO supabase_admin;

CREATE TRIGGER deals_set_updated_at
    BEFORE INSERT OR UPDATE 
    ON public.deals
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_updated_at();

CREATE TABLE IF NOT EXISTS public.user_profiles
(
    created_at timestamp with time zone DEFAULT now(),
    user_id uuid NOT NULL,
    profile_pic_url text COLLATE pg_catalog."default",
    name text COLLATE pg_catalog."default",
    subtitle text COLLATE pg_catalog."default",
    is_sponsor boolean NOT NULL DEFAULT false,
    is_investor boolean NOT NULL DEFAULT false,
    is_verified boolean NOT NULL,
    nominated_by_user_id uuid,
    about text COLLATE pg_catalog."default",
    facebook_url text COLLATE pg_catalog."default",
    twitter_url text COLLATE pg_catalog."default",
    instagram_url text COLLATE pg_catalog."default",
    linkedin_url text COLLATE pg_catalog."default",
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT user_profile_pkey PRIMARY KEY (user_id),
    CONSTRAINT user_profiles_nominated_by_user_id_fkey FOREIGN KEY (nominated_by_user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT user_profiles_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.user_profiles
    OWNER to postgres;

GRANT ALL ON TABLE public.user_profiles TO anon;

GRANT ALL ON TABLE public.user_profiles TO authenticated;

GRANT ALL ON TABLE public.user_profiles TO postgres;

GRANT ALL ON TABLE public.user_profiles TO service_role;

CREATE TRIGGER user_profiles_set_updated_at
    BEFORE INSERT OR UPDATE 
    ON public.user_profiles
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_updated_at();

CREATE TABLE IF NOT EXISTS public.endorsements
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    author_user_id uuid NOT NULL,
    to_user_id uuid NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    subtitle text COLLATE pg_catalog."default" NOT NULL,
    deal_id bigint,
    CONSTRAINT endorsements_pkey PRIMARY KEY (id),
    CONSTRAINT endorsements_author_user_id_fkey FOREIGN KEY (author_user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT endorsements_deal_id_fkey FOREIGN KEY (deal_id)
        REFERENCES public.deals (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT endorsements_to_user_id_fkey FOREIGN KEY (to_user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.endorsements
    OWNER to supabase_admin;

GRANT ALL ON TABLE public.endorsements TO anon;

GRANT ALL ON TABLE public.endorsements TO authenticated;

GRANT ALL ON TABLE public.endorsements TO postgres;

GRANT ALL ON TABLE public.endorsements TO service_role;

GRANT ALL ON TABLE public.endorsements TO supabase_admin;

CREATE TRIGGER endorsements_set_updated_at
    AFTER INSERT OR UPDATE 
    ON public.endorsements
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_updated_at();

CREATE TABLE IF NOT EXISTS public.organizations
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    profile_pic_url text COLLATE pg_catalog."default",
    name text COLLATE pg_catalog."default",
    about text COLLATE pg_catalog."default",
    linkedin_url text COLLATE pg_catalog."default",
    CONSTRAINT organizations_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.organizations
    OWNER to supabase_admin;

GRANT ALL ON TABLE public.organizations TO anon;

GRANT ALL ON TABLE public.organizations TO authenticated;

GRANT ALL ON TABLE public.organizations TO postgres;

GRANT ALL ON TABLE public.organizations TO service_role;

GRANT ALL ON TABLE public.organizations TO supabase_admin;

CREATE TRIGGER organizations_set_updated_at
    AFTER INSERT OR UPDATE 
    ON public.organizations
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_updated_at();

