-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.conversations
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    title text COLLATE pg_catalog."default",
    is_marked_done boolean NOT NULL DEFAULT false,
    CONSTRAINT conversations_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.conversations
    OWNER to supabase_admin;

GRANT ALL ON TABLE public.conversations TO anon;

GRANT ALL ON TABLE public.conversations TO authenticated;

GRANT ALL ON TABLE public.conversations TO postgres;

GRANT ALL ON TABLE public.conversations TO service_role;

GRANT ALL ON TABLE public.conversations TO supabase_admin;

CREATE TRIGGER conversations_set_updated_at
    AFTER INSERT OR UPDATE 
    ON public.conversations
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_updated_at();


CREATE TABLE IF NOT EXISTS public.conversation_to_user_associations
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    user_id uuid,
    conversation_id bigint,
    CONSTRAINT conversation_to_user_associations_pkey PRIMARY KEY (id),
    CONSTRAINT conversation_to_user_associations_conversation_id_fkey FOREIGN KEY (conversation_id)
        REFERENCES public.conversations (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT conversation_to_user_associations_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.conversation_to_user_associations
    OWNER to supabase_admin;

GRANT ALL ON TABLE public.conversation_to_user_associations TO anon;

GRANT ALL ON TABLE public.conversation_to_user_associations TO authenticated;

GRANT ALL ON TABLE public.conversation_to_user_associations TO postgres;

GRANT ALL ON TABLE public.conversation_to_user_associations TO service_role;

GRANT ALL ON TABLE public.conversation_to_user_associations TO supabase_admin;

CREATE TRIGGER conversation_to_user_associations_set_updated_at
    AFTER INSERT OR UPDATE 
    ON public.conversation_to_user_associations
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_updated_at();



CREATE TABLE IF NOT EXISTS public.messages
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    conversation_id bigint NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    user_id uuid NOT NULL,
    on_deal_id bigint,
    nudged_time timestamp with time zone,
    CONSTRAINT messages_pkey PRIMARY KEY (id),
    CONSTRAINT messages_conversation_id_fkey FOREIGN KEY (conversation_id)
        REFERENCES public.conversations (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT messages_on_deal_id_fkey FOREIGN KEY (on_deal_id)
        REFERENCES public.deals (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT messages_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.messages
    OWNER to supabase_admin;

GRANT ALL ON TABLE public.messages TO supabase_admin;

GRANT ALL ON TABLE public.messages TO authenticated;

GRANT ALL ON TABLE public.messages TO anon;

GRANT ALL ON TABLE public.messages TO postgres;

GRANT ALL ON TABLE public.messages TO service_role;

CREATE TRIGGER messages_set_updated_at
    AFTER INSERT OR UPDATE 
    ON public.messages
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_updated_at();


CREATE TABLE IF NOT EXISTS public.message_read_receipts
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    user_id uuid NOT NULL,
    CONSTRAINT message_read_receipts_pkey PRIMARY KEY (id),
    CONSTRAINT message_read_receipts_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.message_read_receipts
    OWNER to supabase_admin;

GRANT ALL ON TABLE public.message_read_receipts TO anon;

GRANT ALL ON TABLE public.message_read_receipts TO authenticated;

GRANT ALL ON TABLE public.message_read_receipts TO postgres;

GRANT ALL ON TABLE public.message_read_receipts TO service_role;

GRANT ALL ON TABLE public.message_read_receipts TO supabase_admin;

CREATE TRIGGER message_read_receipts_set_updated_at
    AFTER INSERT OR UPDATE 
    ON public.message_read_receipts
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_updated_at();


GRANT ALL ON TABLE public.relationships TO supabase_admin;
CREATE TRIGGER relationships_set_updated_at
    AFTER INSERT OR UPDATE 
    ON public.relationships
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_updated_at();

