CREATE TABLE IF NOT EXISTS public.organization_to_user_associations
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    org_id bigint NOT NULL,
    user_id uuid NOT NULL,
    is_leadership boolean NOT NULL DEFAULT false,
    order_index bigint,
    is_current boolean NOT NULL DEFAULT true,
    job_title text COLLATE pg_catalog."default",
    CONSTRAINT organization_to_user_association_pkey PRIMARY KEY (id),
    CONSTRAINT organization_to_user_associations_org_id_fkey FOREIGN KEY (org_id)
        REFERENCES public.organizations (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT organization_to_user_associations_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.user_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.organization_to_user_associations
    OWNER to supabase_admin;

GRANT ALL ON TABLE public.organization_to_user_associations TO anon;
GRANT ALL ON TABLE public.organization_to_user_associations TO authenticated;
GRANT ALL ON TABLE public.organization_to_user_associations TO postgres;
GRANT ALL ON TABLE public.organization_to_user_associations TO service_role;
GRANT ALL ON TABLE public.organization_to_user_associations TO supabase_admin;

CREATE TRIGGER organization_to_user_association_set_updated_at
    BEFORE INSERT OR UPDATE 
    ON public.organization_to_user_associations
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_updated_at();


ALTER TABLE IF EXISTS public.organizations
    ADD COLUMN cover_photo_url text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.organizations
    ADD COLUMN headline text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.organizations
    ADD COLUMN headquarters text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.organizations
    ADD COLUMN email text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.organizations
    ADD COLUMN website_url text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.organizations
    ADD COLUMN instagram_url text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.organizations
    ADD COLUMN twitter_url text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.organizations
    ADD COLUMN handle text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.organizations
    ADD CONSTRAINT organizations_handle_key UNIQUE (handle);


ALTER TABLE IF EXISTS public.deal_attachment_stats
    ADD CONSTRAINT deal_attachment_stats_deal_attachment_id_user_id_key UNIQUE (deal_attachment_id, user_id);

CREATE OR REPLACE VIEW public.search_users_view
 AS
 SELECT user_profiles.user_id,
    user_profiles.first_name,
    user_profiles.last_name,
    user_profiles.handle,
    user_profiles.profile_pic_url,
    user_profiles.subtitle,
    (EXISTS ( SELECT connections.id,
            connections.created_at,
            connections.updated_at,
            connections.from_user_id,
            connections.to_user_id
           FROM connections
          WHERE connections.from_user_id = auth.uid() AND connections.to_user_id = user_profiles.user_id OR connections.from_user_id = user_profiles.user_id AND connections.to_user_id = auth.uid())) AS is_connected,
    json_array_length(mutual_connections_view.mutual_connections) AS num_mutuals,
    mutual_connections_view.mutual_connections
   FROM user_profiles
     JOIN mutual_connections_view ON mutual_connections_view.user_id = user_profiles.user_id;

ALTER TABLE public.search_users_view
    OWNER TO postgres;

GRANT ALL ON TABLE public.search_users_view TO authenticated;
GRANT ALL ON TABLE public.search_users_view TO postgres;
GRANT ALL ON TABLE public.search_users_view TO anon;
GRANT ALL ON TABLE public.search_users_view TO service_role;

CREATE OR REPLACE VIEW public.organization_page_view
 AS
 SELECT org.id,
    org.handle,
    org.cover_photo_url,
    org.profile_pic_url,
    org.name,
    org.headline,
    org.headquarters,
    org.email,
    org.about,
    org.website_url,
    org.linkedin_url,
    org.instagram_url,
    org.twitter_url,
    ( SELECT json_agg(team_members.*) AS team_members
           FROM ( SELECT otua.is_current,
                    otua.is_leadership,
                    otua.job_title,
                    otua.order_index,
                    team_member.user_id AS team_member_user_id,
                    team_member.handle AS team_member_handle,
                    team_member.profile_pic_url AS team_member_profile_pic_url,
                    team_member.first_name AS team_member_first_name,
                    team_member.last_name AS team_member_last_name,
                    team_member.subtitle AS team_member_subtitle,
                    team_member.twitter_url AS team_member_twitter_url,
                    team_member.linkedin_url AS team_member_linkedin_url,
                    team_member.connections_count AS team_member_connections_count,
                    mutual_connections_view.mutual_connections AS team_member_mutual_connections,
                    (EXISTS ( SELECT connections.id,
                            connections.created_at,
                            connections.updated_at,
                            connections.from_user_id,
                            connections.to_user_id
                           FROM connections
                          WHERE connections.from_user_id = auth.uid() AND connections.to_user_id = team_member.user_id OR connections.from_user_id = team_member.user_id AND connections.to_user_id = auth.uid())) AS team_member_is_connected
                   FROM organization_to_user_associations otua
                     JOIN user_profiles team_member ON team_member.user_id = otua.user_id
                     JOIN mutual_connections_view ON mutual_connections_view.user_id = team_member.user_id
                  WHERE otua.org_id = org.id) team_members) AS team_members,
    ( SELECT json_agg(deals.*) AS json_agg
           FROM ( SELECT deal.id,
                    deal.title,
                    deal.about,
                    deal.is_active,
                    deal.handle,
                    ( SELECT deal_image.image_url
                           FROM deal_images deal_image
                          WHERE deal.id = deal_image.deal_id
                          ORDER BY deal_image.order_index, deal_image.created_at
                         LIMIT 1) AS deal_image,
                    deal.interest_count,
                    ( SELECT dtsa.sponsor_id
                           FROM deal_to_sponsor_associations dtsa
                          WHERE dtsa.deal_id = deal.id
                          ORDER BY dtsa.order_index
                         LIMIT 1) AS leader_user_id,
                    deal.created_at
                   FROM deals deal
                     JOIN deal_to_sponsor_associations ON deal_to_sponsor_associations.deal_id = deal.id
                     JOIN organization_to_user_associations ON organization_to_user_associations.user_id = deal_to_sponsor_associations.sponsor_id
                  WHERE organization_to_user_associations.org_id = org.id) deals) AS deals,
    ( SELECT json_agg(team_members_you_may_know.*) AS team_members_you_may_know
           FROM ( SELECT team_member_you_may_know.user_id,
                    team_member_you_may_know.first_name,
                    team_member_you_may_know.last_name,
                    team_member_you_may_know.handle,
                    team_member_you_may_know.profile_pic_url,
                    team_member_you_may_know.subtitle,
                    team_member_you_may_know.is_connected,
                    team_member_you_may_know.num_mutuals,
                    team_member_you_may_know.mutual_connections
                   FROM search_users_view team_member_you_may_know
                     JOIN organization_to_user_associations ON organization_to_user_associations.user_id = team_member_you_may_know.user_id
                  WHERE organization_to_user_associations.org_id = org.id AND team_member_you_may_know.is_connected = false AND team_member_you_may_know.user_id <> auth.uid()
                  ORDER BY team_member_you_may_know.num_mutuals DESC) team_members_you_may_know) AS team_members_you_may_know
   FROM organizations org;

ALTER TABLE public.organization_page_view
    OWNER TO postgres;

GRANT ALL ON TABLE public.organization_page_view TO authenticated;
GRANT ALL ON TABLE public.organization_page_view TO postgres;
GRANT ALL ON TABLE public.organization_page_view TO anon;
GRANT ALL ON TABLE public.organization_page_view TO service_role;

