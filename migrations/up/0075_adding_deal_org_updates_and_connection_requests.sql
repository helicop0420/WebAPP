CREATE TABLE IF NOT EXISTS public.connection_requests
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    from_user_id uuid NOT NULL,
    to_user_id uuid NOT NULL,
    is_seen boolean NOT NULL DEFAULT false,
    CONSTRAINT connection_requests_pkey PRIMARY KEY (id),
    CONSTRAINT connection_requests_from_user_id_to_user_id_key UNIQUE (from_user_id, to_user_id),
    CONSTRAINT connection_requests_from_user_id_fkey FOREIGN KEY (from_user_id)
        REFERENCES public.user_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT connection_requests_to_user_id_fkey FOREIGN KEY (to_user_id)
        REFERENCES public.user_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT chk_no_self_request CHECK (from_user_id <> to_user_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.connection_requests
    OWNER to supabase_admin;

GRANT ALL ON TABLE public.connection_requests TO supabase_admin;

GRANT ALL ON TABLE public.connection_requests TO authenticated;

GRANT ALL ON TABLE public.connection_requests TO anon;

GRANT ALL ON TABLE public.connection_requests TO postgres;

GRANT ALL ON TABLE public.connection_requests TO service_role;

CREATE OR REPLACE FUNCTION public.connection_requests_reverse_check()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
begin
  if EXISTS (select 1 FROM connection_requests WHERE from_user_id = new.to_user_id and to_user_id = new.from_user_id ) then 
    RAISE EXCEPTION 'An outstanding connection_request in the reverse direction already exists';   
  else
    RETURN NEW;
  end if;
end;
$BODY$;

ALTER FUNCTION public.connection_requests_reverse_check()
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.connection_requests_reverse_check() TO authenticated;

GRANT EXECUTE ON FUNCTION public.connection_requests_reverse_check() TO postgres;

GRANT EXECUTE ON FUNCTION public.connection_requests_reverse_check() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.connection_requests_reverse_check() TO anon;

GRANT EXECUTE ON FUNCTION public.connection_requests_reverse_check() TO service_role;


CREATE TRIGGER connection_requests_already_exists_check
    BEFORE INSERT
    ON public.connection_requests
    FOR EACH ROW
    EXECUTE FUNCTION public.connection_requests_reverse_check();

CREATE TRIGGER connection_requests_set_updated_at
    BEFORE INSERT OR UPDATE 
    ON public.connection_requests
    FOR EACH ROW
    EXECUTE FUNCTION public.trigger_set_updated_at();

ALTER TABLE public.waitlist_emails
    ALTER COLUMN email TYPE email COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.deals
    ADD COLUMN calendly_url text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.deals
    ADD COLUMN highlight_equity_raise text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.deals
    ADD COLUMN highlight_equity_raise_value text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.deals
    ADD COLUMN highlight_term text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.deals
    ADD COLUMN highlight_term_value text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.deals
    ADD COLUMN webinar_url text COLLATE pg_catalog."default";

ALTER TABLE IF EXISTS public.organizations
    ADD COLUMN leadership_bio text COLLATE pg_catalog."default";

DROP VIEW IF EXISTS public.profile_page_view;
CREATE OR REPLACE VIEW public.profile_page_view
    AS
     SELECT user_profile.user_id,
    user_profile.handle,
    user_profile.profile_pic_url,
    user_profile.cover_photo_url,
    user_profile.first_name,
    user_profile.last_name,
    user_profile.is_verified,
    user_profile.subtitle,
    user_profile.is_sponsor,
    user_profile.is_investor,
    user_profile.current_org_id,
    user_profile.current_org_position,
    org.profile_pic_url AS current_org_profile_pic_url,
    org.name AS current_org_name,
    user_profile.created_at,
    user_profile.nominated_by_user_id,
    nominated_by_user_profile.profile_pic_url AS nominated_by_user_profile_pic_url,
    nominated_by_user_profile.first_name AS nominated_by_user_first_name,
    nominated_by_user_profile.last_name AS nominated_by_user_last_name,
    nominated_by_user_profile.handle AS nominated_by_user_handle,
    user_profile.about,
    user_profile.connections_count,
    mutual_connections_view.mutual_connections,
    user_profile.linkedin_url,
    user_profile.facebook_url,
    user_profile.instagram_url,
    user_profile.twitter_url,
    sponsor_deals_view.deals,
    ( SELECT json_agg(endorsements.*) AS json_agg
           FROM ( SELECT endorsing_user.handle AS endorsing_user_handle,
                    endorsing_user.user_id AS endorsing_user_user_id,
                    endorsing_user.profile_pic_url AS endorsing_user_profile_pic_url,
                    endorsing_user.first_name AS endorsing_user_first_name,
                    endorsing_user.last_name AS endorsing_user_last_name,
                    endorsement.created_at,
                    endorsement.relationship,
                    endorsement.text,
                    endorsement.on_deal
                   FROM endorsements endorsement
                     JOIN user_profiles endorsing_user ON endorsement.author_user_id = endorsing_user.user_id
                  WHERE endorsement.to_user_id = user_profile.user_id) endorsements) AS endorsements,
    ( SELECT json_agg(people_you_may_know.*) AS people_you_may_know
           FROM ( SELECT people_you_may_know_1.user_id,
                    people_you_may_know_1.first_name,
                    people_you_may_know_1.last_name,
                    people_you_may_know_1.handle,
                    people_you_may_know_1.profile_pic_url,
                    people_you_may_know_1.subtitle,
                    people_you_may_know_1.is_connected,
                    people_you_may_know_1.num_mutuals,
                    people_you_may_know_1.mutual_connections
                   FROM search_users_view people_you_may_know_1
                  WHERE people_you_may_know_1.is_connected = false AND people_you_may_know_1.user_id <> auth.uid()
                  ORDER BY people_you_may_know_1.num_mutuals DESC) people_you_may_know) AS people_you_may_know
   FROM user_profiles user_profile
     LEFT JOIN organizations org ON user_profile.current_org_id = org.id
     LEFT JOIN user_profiles nominated_by_user_profile ON user_profile.nominated_by_user_id = nominated_by_user_profile.user_id
     LEFT JOIN sponsor_deals_view ON sponsor_deals_view.user_id = user_profile.user_id
     LEFT JOIN mutual_connections_view ON mutual_connections_view.user_id = user_profile.user_id;

CREATE OR REPLACE VIEW public.notifications_view
    AS
     SELECT user_profile.user_id,
    ( SELECT json_agg(all_notifs.*) AS all_notifs
           FROM ( SELECT notification.id,
                    notification.created_at,
                    notification.updated_at,
                    notification.receiving_user_id,
                    notification.from_user_id,
                    notification.is_seen,
                    notification.debug_info,
                    notification.attached_deal_id,
                    notification.attached_org_id,
                    notification.notification_type,
                    from_user.first_name,
                    from_user.last_name,
                    from_user.handle,
                    from_user.profile_pic_url,
                    org.name AS attached_org_name,
                    org.profile_pic_url AS attached_org_profile_pic_url,
                    deal.handle AS attached_deal_handle,
                    deal.title AS attached_deal_title,
                    deal_access.unique_share_link
                   FROM notifications notification
                     JOIN user_profiles from_user ON notification.from_user_id = from_user.user_id
                     LEFT JOIN organizations org ON org.id = notification.attached_org_id
                     LEFT JOIN deals deal ON deal.id = notification.attached_deal_id
                     LEFT JOIN deal_accesses deal_access ON deal_access.deal_id = deal.id AND deal_access.user_id = user_profile.user_id
                  WHERE notification.receiving_user_id = user_profile.user_id) all_notifs) AS notifications,
    ( SELECT json_agg(all_connection_reqs.*) AS all_connection_reqs
           FROM ( SELECT connection_request.id,
                    connection_request.is_seen,
                    connection_request.from_user_id,
                    connection_request.created_at,
                    requester.first_name,
                    requester.last_name,
                    requester.handle,
                    requester.profile_pic_url,
                    (EXISTS ( SELECT 1
                           FROM connections conn
                          WHERE conn.from_user_id = connection_request.from_user_id AND conn.to_user_id = connection_request.to_user_id OR conn.from_user_id = connection_request.to_user_id AND conn.to_user_id = connection_request.from_user_id)) AS is_connected
                   FROM connection_requests connection_request
                     LEFT JOIN user_profiles requester ON connection_request.from_user_id = requester.user_id
                  WHERE connection_request.to_user_id = user_profile.user_id) all_connection_reqs) AS connection_requests
   FROM user_profiles user_profile;


DROP VIEW public.organization_page_view;
CREATE OR REPLACE VIEW public.organization_page_view
    AS
     SELECT org.id,
    org.handle,
    org.cover_photo_url,
    org.profile_pic_url,
    org.name,
    org.headline,
    org.headquarters,
    org.email,
    org.about,
    org.website_url,
    org.linkedin_url,
    org.instagram_url,
    org.twitter_url,
    org.leadership_bio,
    ( SELECT json_agg(team_members.*) AS team_members
           FROM ( SELECT otua.is_current,
                    otua.is_leadership,
                    otua.job_title,
                    otua.order_index,
                    team_member.user_id AS team_member_user_id,
                    team_member.handle AS team_member_handle,
                    team_member.profile_pic_url AS team_member_profile_pic_url,
                    team_member.first_name AS team_member_first_name,
                    team_member.last_name AS team_member_last_name,
                    team_member.subtitle AS team_member_subtitle,
                    team_member.twitter_url AS team_member_twitter_url,
                    team_member.linkedin_url AS team_member_linkedin_url,
                    team_member.connections_count AS team_member_connections_count,
                    mutual_connections_view.mutual_connections AS team_member_mutual_connections,
                    (EXISTS ( SELECT connections.id,
                            connections.created_at,
                            connections.updated_at,
                            connections.from_user_id,
                            connections.to_user_id
                           FROM connections
                          WHERE connections.from_user_id = auth.uid() AND connections.to_user_id = team_member.user_id OR connections.from_user_id = team_member.user_id AND connections.to_user_id = auth.uid())) AS team_member_is_connected
                   FROM organization_to_user_associations otua
                     JOIN user_profiles team_member ON team_member.user_id = otua.user_id
                     JOIN mutual_connections_view ON mutual_connections_view.user_id = team_member.user_id
                  WHERE otua.org_id = org.id) team_members) AS team_members,
    ( SELECT json_agg(deals.*) AS json_agg
           FROM ( SELECT deal.id,
                    deal.title,
                    deal.about,
                    deal.is_active,
                    deal.handle,
                    ( SELECT deal_image.image_url
                           FROM deal_images deal_image
                          WHERE deal.id = deal_image.deal_id
                          ORDER BY deal_image.order_index, deal_image.created_at
                         LIMIT 1) AS deal_image,
                    deal.interest_count,
                    ( SELECT dtsa.sponsor_id
                           FROM deal_to_sponsor_associations dtsa
                          WHERE dtsa.deal_id = deal.id
                          ORDER BY dtsa.order_index
                         LIMIT 1) AS leader_user_id,
                    deal.created_at,
                    deal_access.unique_share_link
                   FROM deals deal
                     JOIN deal_to_sponsor_associations ON deal_to_sponsor_associations.deal_id = deal.id
                     LEFT JOIN deal_accesses deal_access ON deal_access.deal_id = deal.id AND deal_access.user_id = deal_to_sponsor_associations.sponsor_id
                     JOIN organization_to_user_associations ON organization_to_user_associations.user_id = deal_to_sponsor_associations.sponsor_id
                  WHERE organization_to_user_associations.org_id = org.id) deals) AS deals,
    ( SELECT json_agg(team_members_you_may_know.*) AS team_members_you_may_know
           FROM ( SELECT team_member_you_may_know.user_id,
                    team_member_you_may_know.first_name,
                    team_member_you_may_know.last_name,
                    team_member_you_may_know.handle,
                    team_member_you_may_know.profile_pic_url,
                    team_member_you_may_know.subtitle,
                    team_member_you_may_know.is_connected,
                    team_member_you_may_know.num_mutuals,
                    team_member_you_may_know.mutual_connections
                   FROM search_users_view team_member_you_may_know
                     JOIN organization_to_user_associations ON organization_to_user_associations.user_id = team_member_you_may_know.user_id
                  WHERE organization_to_user_associations.org_id = org.id AND team_member_you_may_know.is_connected = false AND team_member_you_may_know.user_id <> auth.uid()
                  ORDER BY team_member_you_may_know.num_mutuals DESC) team_members_you_may_know) AS team_members_you_may_know
   FROM organizations org;
GRANT ALL ON TABLE public.organization_page_view TO authenticated;
GRANT ALL ON TABLE public.organization_page_view TO postgres;
GRANT ALL ON TABLE public.organization_page_view TO anon;
GRANT ALL ON TABLE public.organization_page_view TO service_role;

DROP VIEW public.deal_page_view;
CREATE OR REPLACE VIEW public.deal_page_view
    AS
     SELECT deal.id,
    deal.title,
    deal.highlight_1_name,
    deal.highlight_1_value,
    deal.highlight_2_name,
    deal.highlight_2_value,
    deal.highlight_term,
    deal.highlight_term_value,
    deal.highlight_equity_raise,
    deal.highlight_equity_raise_value,
    deal.handle,
    deal.about,
    deal.is_active,
    deal.launch_date,
    deal.webinar_url,
    deal.calendly_url,
    ( SELECT json_agg(cur_deal_images.*) AS json_agg
           FROM ( SELECT deal_image.id,
                    deal_image.created_at,
                    deal_image.updated_at,
                    deal_image.deal_id,
                    deal_image.image_url,
                    deal_image.order_index
                   FROM deal_images deal_image
                  WHERE deal_image.deal_id = deal.id) cur_deal_images) AS deal_images,
    ( SELECT count(*) AS count
           FROM deal_views
          WHERE deal_views.deal_id = deal.id) AS deal_views,
    deal.interest_count,
    ( SELECT json_agg(cur_deal_interests.*) AS json_agg
           FROM ( SELECT interested_user.user_id,
                    interested_user.first_name,
                    interested_user.last_name,
                    interested_user.profile_pic_url,
                    interested_user.handle,
                    interested_user.subtitle
                   FROM deal_interest
                     JOIN user_profiles interested_user ON interested_user.user_id = deal_interest.user_id
                  WHERE deal_interest.deal_id = deal.id) cur_deal_interests) AS connections_deal_interest,
    ( SELECT json_agg(all_comments.*) AS json_agg
           FROM ( SELECT comment.id,
                    comment.created_at,
                    comment.updated_at,
                    comment.user_id,
                    commenting_user.handle,
                    commenting_user.first_name,
                    commenting_user.last_name,
                    commenting_user.profile_pic_url,
                    comment.comment,
                    comment.replying_to_comment_id,
                    comment.type,
                    comment.likes_count,
                    comment.is_private,
                    ( SELECT json_agg(comment_likes.*) AS json_agg
                           FROM ( SELECT comment_like.user_id,
                                    liking_user.first_name,
                                    liking_user.last_name,
                                    liking_user.profile_pic_url,
                                    liking_user.handle,
                                    liking_user.subtitle
                                   FROM deal_comment_likes comment_like
                                     JOIN user_profiles liking_user ON comment_like.user_id = liking_user.user_id
                                  WHERE comment_like.deal_comment_id = comment.id) comment_likes) AS likes
                   FROM deal_comments comment
                     JOIN user_profiles commenting_user ON commenting_user.user_id = comment.user_id
                  WHERE comment.deal_id = deal.id) all_comments) AS deal_comments,
    ( SELECT json_agg(deal_faqs.*) AS deal_faqs
           FROM ( SELECT faq.id,
                    faq.created_at,
                    faq.updated_at,
                    faq.question,
                    faq.answer
                   FROM deal_faqs faq
                  WHERE faq.deal_id = deal.id) deal_faqs) AS deal_faqs,
    ( SELECT json_agg(sponsors.*) AS json_agg
           FROM ( SELECT sponsor.user_id,
                    sponsor.first_name,
                    sponsor.last_name,
                    sponsor.handle,
                    sponsor.subtitle,
                    sponsor.profile_pic_url,
                    sponsor.current_org_position,
                    sponsor_org.name AS current_org_name,
                    sponsor_deals_view.deals,
                    mutual_connections_view.mutual_connections,
                    deal_to_sponsor_associations.order_index,
                    deal_to_sponsor_associations.id AS deal_to_sponsor_association_id,
                    ( SELECT json_agg(org_members.*) AS org_members
                           FROM ( SELECT org_member.user_id,
                                    org_member.first_name,
                                    org_member.last_name,
                                    org_member.profile_pic_url,
                                    org_member.handle,
                                    org_member.current_org_position
                                   FROM user_profiles org_member
                                  WHERE org_member.current_org_id = sponsor.current_org_id AND org_member.user_id <> sponsor.user_id) org_members) AS org_members
                   FROM deal_to_sponsor_associations
                     JOIN sponsor_deals_view ON sponsor_deals_view.user_id = deal_to_sponsor_associations.sponsor_id
                     JOIN mutual_connections_view ON mutual_connections_view.user_id = deal_to_sponsor_associations.sponsor_id
                     JOIN user_profiles sponsor ON deal_to_sponsor_associations.sponsor_id = sponsor.user_id
                     LEFT JOIN organizations sponsor_org ON sponsor_org.id = sponsor.current_org_id
                  WHERE deal_to_sponsor_associations.deal_id = deal.id
                  ORDER BY deal_to_sponsor_associations.order_index) sponsors) AS deal_sponsors,
    ( SELECT json_agg(referrer.*) AS referrer
           FROM ( SELECT referrer_1.user_id,
                    referrer_1.first_name,
                    referrer_1.last_name,
                    referrer_1.profile_pic_url,
                    referrer_1.handle
                   FROM user_profiles referrer_1
                     JOIN deal_shares deal_share ON deal_share.to_user_id = auth.uid() AND deal_share.deal_id = deal.id AND deal_share.from_user_id = referrer_1.user_id
                  ORDER BY deal_share.created_at
                 LIMIT 1) referrer) AS referrer,
    user_invite_limit_view.invite_limit - (( SELECT count(*) AS count
           FROM invites invite
          WHERE invite.from_user_id = auth.uid() AND invite.is_accepted = true)) AS invites_left
   FROM deals deal
     LEFT JOIN user_invite_limit_view ON user_invite_limit_view.user_id = auth.uid();
GRANT ALL ON TABLE public.deal_page_view TO authenticated;
GRANT ALL ON TABLE public.deal_page_view TO postgres;
GRANT ALL ON TABLE public.deal_page_view TO anon;
GRANT ALL ON TABLE public.deal_page_view TO service_role;


ALTER TABLE IF EXISTS public.deals DROP COLUMN IF EXISTS highlight_3_name;
ALTER TABLE IF EXISTS public.deals DROP COLUMN IF EXISTS highlight_3_value;
ALTER TABLE IF EXISTS public.deals DROP COLUMN IF EXISTS highlight_4_name;
ALTER TABLE IF EXISTS public.deals DROP COLUMN IF EXISTS highlight_4_value;